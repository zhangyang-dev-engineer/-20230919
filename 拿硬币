//    桌上有 n 堆力扣币，每堆的数量保存在数组 coins 中。我们每次可以选择任意一堆，拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。
//
//    示例 1：
//
//    输入：[4,2,1]
//
//    输出：4
//
//    解释：第一堆力扣币最少需要拿 2 次，第二堆最少需要拿 1 次，第三堆最少需要拿 1 次，总共 4 次即可拿完。
//
//    示例 2：
//
//    输入：[2,3,10]
//
//    输出：8
//    解释：第一：1   第二：2次   第三：5
//    限制：
//
//            1 <= n <= 4
//            1 <= coins[i] <= 10
    public static void main(String[] args) {
        int[] coins = {2,3,10};
        System.out.println(minCount(coins));
    }

    /**
     * 自己解法
     * @param coins
     * @return
     */
    public static int minCount(int[] coins) {
        int count = 0;
        for (int coin : coins) {
            if (coin<1||coin>10){
                break;
            }
            int i = coin % 2;
            int i1 = coin / 2;
            if (i==0){
                count=count+i1;
            }else {
                count=count+i1+i;
            }
        }
        return count;
    }

    /**
     * 官方解法
     * @param coins
     * @return
     */
    public static int minCount1(int[] coins) {
        int sum = 0;
        for (int i : coins) {
            sum += (i + 1) / 2;
        }
        return sum;
    }
